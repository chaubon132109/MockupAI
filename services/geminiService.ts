import { GoogleGenAI, Modality } from "@google/genai";
import { ImageFile } from '../types';
import { fileToBase64 } from '../utils/fileUtils';

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const fileToPart = async (imageFile: ImageFile) => {
  const base64Data = await fileToBase64(imageFile.file);
  return {
    inlineData: {
      data: base64Data,
      mimeType: imageFile.file.type,
    },
  };
};

export const generateVirtualTryOn = async (
  modelImage: ImageFile,
  outfitImage: ImageFile,
  prompt: string
): Promise<string> => {
  try {
    const modelImagePart = await fileToPart(modelImage);
    const outfitImagePart = await fileToPart(outfitImage);
    const textPart = { text: prompt };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [modelImagePart, outfitImagePart, textPart],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }
    throw new Error('No image was generated by the API.');
  } catch (error) {
    console.error("Error in generateVirtualTryOn:", error);
    throw error;
  }
};

export const editImage = async (
  baseImage: ImageFile,
  prompt: string
): Promise<string> => {
  try {
    const imagePart = await fileToPart(baseImage);
    const textPart = { text: prompt };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [imagePart, textPart],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }
    throw new Error('No image was generated by the API.');
  } catch (error) {
    console.error("Error in editImage:", error);
    throw error;
  }
};

export const generateImage = async (prompt: string): Promise<string> => {
  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/png',
        aspectRatio: '1:1',
      },
    });

    const base64ImageBytes = response.generatedImages[0].image.imageBytes;
    return `data:image/png;base64,${base64ImageBytes}`;
  } catch (error) {
    console.error("Error in generateImage:", error);
    throw error;
  }
};

export const placePosterOnWall = async (
  posterImage: ImageFile,
  prompt: string
): Promise<string> => {
  try {
    const imagePart = await fileToPart(posterImage);
    const textPart = { text: prompt };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [imagePart, textPart],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }
    throw new Error('No image was generated by the API.');
  } catch (error) {
    console.error("Error in placePosterOnWall:", error);
    throw error;
  }
};
